plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.14-SNAPSHOT'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'jacoco'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'com.vandemarket'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '11'
}

configurations {
    asciidoctorExt
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

ext {
    set('springCloudVersion', "2021.0.8")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'io.springfox:springfox-boot-starter:3.0.0'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    //    security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.security:spring-security-test'
    //    jwt
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    testImplementation 'com.h2database:h2'

    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.springframework.kafka:spring-kafka-test'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}
ext {
    snippetsDir = file('build/generated-snippets')
}

test {
    outputs.dir snippetsDir
    finalizedBy 'jacocoTestReport'
    useJUnitPlatform()
}

asciidoctor {
    dependsOn test
    inputs.dir snippetsDir
    attributes 'snippets': snippetsDir
    doFirst {
        delete 'src/main/resources/static/docs'
    }
}

bootJar {
    dependsOn asciidoctor
    copy {
        from "build/docs/asciidoc"
        into "src/main/resources/static/docs"
    }
}



jacoco {
    toolVersion = '0.8.8'
}

jacocoTestReport {
    dependsOn test // 리포트 생성을 위해서는 test가 먼저 완료되어야 함
    reports {
        xml.required = false
        csv.required = false
        html.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            "**/*Application*",
                            '**/*Request*',
                            '**/*JpaEntity*',
                            '**/*Response*',
                            '**/Swagger*',
                            '**/PasswordEncoderConfig*',
                            '**/JpaAuditingConfig*',
                            '**/common/**',
                            '**/*Builder*',
                            '**/*Q**'
                    ])
                })
        )
    }
}
jacocoTestCoverageVerification {
    violationRules {
        rule {
            excludes = [
                    "**/*Application*",
                    '**/*Request*',
                    '**/*Response*',
                    '**/Swagger*',
                    '**/PasswordEncoderConfig*',
                    '**/JpaAuditingConfig*',
                    '**/common/**',
                    '**/*JpaEntity*',
                    '**/*Q**'
            ]
        }
    }
}
